/**
 * Entry-point for the Node server.
 * - Serves static client assets from `../public`
 * - Streams characters generated by the Monkey to connected Socket.IO clients
 * - Exposes a small REST endpoint (`/chars`) so the browser can fetch historical
 *   chunks that already scrolled off the live stream.
 */

import express            from 'express';
import { createServer }   from 'http';
import { Server }         from 'socket.io';
import path               from 'path';

import { Monkey }              from './monkey';
import { read, CHUNK }         from './chunk-store';
import { WordDetector, type WordHit } from './word-detector';

// ────────────────────────────────────────────────────────────────────────────────
// Bootstrapping
// ────────────────────────────────────────────────────────────────────────────────
const app  = express();           // Express HTTP layer
const http = createServer(app);   // Plain HTTP server (needed for socket.io)
const io   = new Server(http);    // WebSocket transport

// Domain objects ---------------------------------------------------------------
const monkey   = new Monkey();      // Generates pseudo-random lowercase letters
const detector = new WordDetector(); // Emits "word" events on valid hits
const found: WordHit[] = [];        // All words found so far (shared w/ clients)

// Static file hosting ----------------------------------------------------------
app.use(express.static(path.join(__dirname, '../public')));

/**
 * GET /chars?start=0&len=1024
 * Random–access API so the browser can fetch any slice of previously
 * generated text.  Guards defend against obviously bad requests.
 */
app.get('/chars', (req, res) => {
  const start = Number(req.query.start);
  const len   = Number(req.query.len);

  if (
    Number.isNaN(start) || Number.isNaN(len) ||
    start < 0 || len <= 0 || len > CHUNK * 4
  ) {
    res.status(400).end();
  } else {
    res.type('text/plain').send(read(start, len));
  }

});

// WebSocket lifecycle -----------------------------------------------------------
io.on('connection', socket => {
  socket.emit('cursor',     monkey.cursor); // where the monkey is now
  socket.emit('init-words', found);         // all words discovered so far
});

// Main loop: have the monkey type every 100 ms -------------------------------
setInterval(() => {
  const { index, ch } = monkey.next();      // 1. generate next char
  detector.push(ch);                        // 2. check for new word hits
  io.emit('monkey-type', { index, ch });    // 3. broadcast to everyone
}, 100);

// Word detection side-channel -----------------------------------------------
detector.on('word', hit => {
  found.push(hit);
  io.emit('word', hit);                     // notify browsers of the new word
});

// Start listening --------------------------------------------------------------
http.listen(5500, () => console.log('Server listening on :5500'));
